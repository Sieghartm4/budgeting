let funds = {}, currentFund = null, nextCV = 1590, editIndex = -1;
['IT', 'CABLING', 'CONSTRUCTION', 'ADMIN'].forEach(name => {
    funds[name] = { initialBudget: 50000, currentBudget: 50000, disbursements: [] };
    $('#fundSelector').append(`<option value="${name}">${name}</option>`);
});
function manageFund() {
    const selected = $('#fundSelector').val();
    const newName = $('#newFundName').val().trim();
    const budget = parseFloat($('#initialBudget').val()) || 0;
    if (selected) {
        currentFund = selected;
    } else if (newName) {
        if (!funds[newName]) {
            funds[newName] = { initialBudget: budget, currentBudget: budget, disbursements: [] };
            $('#fundSelector').append(`<option value="${newName}">${newName}</option>`);
        }
        currentFund = newName;
        $('#fundSelector').val(newName);
        $('#newFundName, #initialBudget').val('');
    } else {
        return alert('Please select or create a fund');
    }
    displayFund();
}
function addBudget() {
    if (!currentFund) return alert('Select a fund first');
    const amount = parseFloat($('#addBudget').val()) || 0;
    if (amount <= 0) return alert('Enter valid amount');
    funds[currentFund].initialBudget += amount;
    funds[currentFund].currentBudget += amount;
    $('#addBudget').val('');
    displayFund();
}
function displayFund() {
    $('#currentFundDisplay').removeClass('d-none');
    $('#currentFundTitle').text(`Current Fund: ${currentFund}`);
    loadTable();
    updateDisplays();
}
function calculateRunningBalance() {
    const fund = funds[currentFund];
    let balance = fund.currentBudget;
    fund.disbursements.forEach(item => {
        if (item.inflow > 0) balance += item.inflow;
        if (item.outflow > 0) balance -= item.outflow;
    });
    return balance;
}
function loadTable() {
    const tbody = $('#tableBody').empty();
    const data = funds[currentFund].disbursements;
    let runningBalance = funds[currentFund].currentBudget;
    data.forEach((item, idx) => {
        if (item.inflow > 0) runningBalance += item.inflow;
        if (item.outflow > 0) runningBalance -= item.outflow;
        tbody.append(createRow(item, idx, runningBalance));
    });
    if (!data.length || !$('.input-row').length) addInputRow();
}
function createRow(item, idx, balance) {
    const statusClass = item.status === 'Liquidated' ? 'status-liquidated' : 'status-unliquidated';
    let extraClass = '';
    if (item.autoGenerated) {
        extraClass = item.type === 'RETURN' ? 'return-entry' : 
                   item.type === 'REIMBURSE' ? 'reimburse-entry' : 'auto-generated';
    }
    const needsEdit = item.amountIssued > 0 && !item.outflow && !item.inflow && item.status === 'Unliquidated';
    return `<tr class="${statusClass} ${extraClass}" data-index="${idx}">
        <td>${item.date || ''}</td>
        <td>${item.receivedBy || ''}</td>
        <td>${item.department || ''}</td>
        <td>${item.particulars || ''}</td>
        <td>${item.cvNo || ''}</td>
        <td>${item.transactionType || item.type || ''}</td>
        <td>₱${(item.amountIssued || 0).toLocaleString('en-US', {minimumFractionDigits: 2})}</td>
        <td>${item.outflow ? '₱' + item.outflow.toLocaleString('en-US', {minimumFractionDigits: 2}) : ''}</td>
        <td>${item.inflow ? '₱' + item.inflow.toLocaleString('en-US', {minimumFractionDigits: 2}) : ''}</td>
        <td>₱${balance.toLocaleString('en-US', {minimumFractionDigits: 2})}</td>
        <td class="${statusClass}">${item.status}</td>
        <td>${item.remarks || ''}</td>
        <td>
            ${needsEdit ? `<button class="btn btn-warning btn-sm me-1" onclick="editRow(${idx})"><i class="fas fa-edit"></i></button>` : ''}
            <button class="btn btn-danger btn-sm" onclick="deleteRow(${idx})"><i class="fas fa-trash"></i></button>
        </td>
    </tr>`;
}
function addInputRow() {
    const today = new Date().toISOString().split('T')[0];
    $('#tableBody').append(`
        <tr class="input-row">
            <td><input type="date" class="form-control form-control-sm" value="${today}"></td>
            <td><input type="text" class="form-control form-control-sm" placeholder="Received By"></td>
            <td><select class="form-select form-select-sm">
                <option value="">Select...</option>
                ${['IT', 'CABLING', 'CONSTRUCTION', 'ADMIN', 'BARAPUBO'].map(d => `<option value="${d}">${d}</option>`).join('')}
            </select></td>
            <td><input type="text" class="form-control form-control-sm" placeholder="Particulars"></td>
            <td><input type="text" class="form-control form-control-sm" value="${nextCV}"></td>
            <td><select class="form-select form-select-sm">
                <option value="">Type...</option>
                <option value="CASH">CASH</option>
                <option value="GCASH">GCASH</option>
            </select></td>
            <td><input type="number" class="form-control form-control-sm" placeholder="0.00" step="0.01"></td>
            <td><input type="number" class="form-control form-control-sm outflow" placeholder="0.00" step="0.01"></td>
            <td><input type="number" class="form-control form-control-sm inflow" placeholder="0.00" step="0.01"></td>
            <td>₱0.00</td>
            <td><span class="badge bg-secondary">Auto</span></td>
            <td><input type="text" class="form-control form-control-sm" placeholder="Remarks"></td>
            <td><button class="btn btn-success btn-sm" onclick="saveRow(this)"><i class="fas fa-save"></i></button></td>
        </tr>
    `);
    $('.input-row .outflow, .input-row .inflow').on('input', function() {
        const row = $(this).closest('tr');
        const isOutflow = $(this).hasClass('outflow');
        const other = row.find(isOutflow ? '.inflow' : '.outflow');
        other.prop('disabled', $(this).val() !== '').val('');
    });
}
function saveRow(btn) {
    const row = $(btn).closest('tr');
    const inputs = row.find('input, select');
    const data = {
        date: inputs.eq(0).val(),
        receivedBy: inputs.eq(1).val(),
        department: inputs.eq(2).val(),
        particulars: inputs.eq(3).val(),
        cvNo: inputs.eq(4).val(),
        transactionType: inputs.eq(5).val(),
        amountIssued: parseFloat(inputs.eq(6).val()) || 0,
        outflow: parseFloat(inputs.eq(7).val()) || 0,
        inflow: parseFloat(inputs.eq(8).val()) || 0,
        remarks: inputs.eq(11).val()
    };
    if (!data.date || !data.receivedBy || !data.department || !data.particulars || !data.cvNo || !data.transactionType) {
        return alert('Please fill all required fields');
    }
    if (data.amountIssued > 0 && !data.outflow && !data.inflow) {
        data.status = 'Unliquidated';
        funds[currentFund].currentBudget -= data.amountIssued;
    } else if ((data.inflow > 0 || data.outflow > 0) && !data.amountIssued) {
        data.status = 'Liquidated';
        if (data.inflow > 0) funds[currentFund].currentBudget += data.inflow;
        else if (data.outflow > 0) funds[currentFund].currentBudget -= data.outflow;
    } else {
        data.status = 'Unliquidated';
        if (data.amountIssued > 0) funds[currentFund].currentBudget -= data.amountIssued;
    }
    funds[currentFund].disbursements.push(data);
    nextCV++;
    displayFund();
}
function editRow(idx) {
    editIndex = idx;
    const item = funds[currentFund].disbursements[idx];
    $('#editAmountIssued').text(`₱${item.amountIssued.toLocaleString('en-US', {minimumFractionDigits: 2})}`);
    $('#editOutflow, #editInflow').val('');
    $('#calculationResult').addClass('d-none');
    $('#editOutflow, #editInflow').off('input').on('input', function() {
        const isOutflow = this.id === 'editOutflow';
        const value = parseFloat($(this).val()) || 0;
        const other = isOutflow ? $('#editInflow') : $('#editOutflow');
        const issued = item.amountIssued;
        if (value > 0) {
            other.prop('disabled', true).val('');
            if (isOutflow) {
                if (value < issued) {
                    const returnAmount = issued - value;
                    showResult(`Expense: ₱${value.toFixed(2)}<br>Return to fund: ₱${returnAmount.toFixed(2)}`, 'alert-success');
                } else if (value > issued) {
                    const reimburseAmount = value - issued;
                    showResult(`Expense: ₱${value.toFixed(2)}<br>Additional reimbursement: ₱${reimburseAmount.toFixed(2)}`, 'alert-warning');
                } else {
                    showResult(`Perfect match - Expense: ₱${value.toFixed(2)}`, 'alert-info');
                }
            } else {
                if (value > issued) {
                    $(this).val(issued);
                    showResult(`Return amount cannot exceed issued amount (₱${issued.toFixed(2)})`, 'alert-danger');
                    return;
                }
                const outflowAmount = issued - value;
                other.prop('disabled', false).val(outflowAmount);
                showResult(`Return: ₱${value.toFixed(2)}<br>Actual expense: ₱${outflowAmount.toFixed(2)}`, 'alert-success');
            }
        } else {
            other.prop('disabled', false);
            $('#calculationResult').addClass('d-none');
        }
    });
    new bootstrap.Modal($('#editModal')[0]).show();
}
function showResult(message, alertClass) {
    $('#calculationResult').removeClass('d-none alert-success alert-warning alert-info alert-danger')
                          .addClass(alertClass).html(message);
}
function saveEdit() {
    const item = funds[currentFund].disbursements[editIndex];
    const outflow = parseFloat($('#editOutflow').val()) || 0;
    const inflow = parseFloat($('#editInflow').val()) || 0;
    const issued = item.amountIssued;
    if (!outflow && !inflow) return alert('Enter either outflow or inflow amount');
    if (outflow && inflow) return alert('Cannot have both outflow and inflow');
    if (inflow > issued) return alert('Return amount cannot exceed issued amount');
    item.status = 'Liquidated';
    if (outflow > 0) {
        item.outflow = outflow;
        if (outflow < issued) {
            const returnAmount = issued - outflow;
            createAutoEntry(item, 'RETURN', returnAmount, 'inflow');
            funds[currentFund].currentBudget += returnAmount;
        } else if (outflow > issued) {
            const reimburseAmount = outflow - issued;
            createAutoEntry(item, 'REIMBURSE', reimburseAmount, 'outflow');
            funds[currentFund].currentBudget -= reimburseAmount;
        }
    } else {
        item.inflow = inflow;
        item.outflow = issued - inflow;
        funds[currentFund].currentBudget += inflow;
    }
    bootstrap.Modal.getInstance($('#editModal')[0]).hide();
    displayFund();
}
function createAutoEntry(originalItem, type, amount, flowType) {
    const entry = {
        date: originalItem.date,
        receivedBy: originalItem.receivedBy,
        department: originalItem.department,
        particulars: `${originalItem.particulars} - ${type === 'RETURN' ? 'Return' : 'Reimbursement'}`,
        cvNo: originalItem.cvNo + (type === 'RETURN' ? 'R' : 'X'),
        transactionType: type,
        amountIssued: 0,
        outflow: flowType === 'outflow' ? amount : 0,
        inflow: flowType === 'inflow' ? amount : 0,
        status: 'Liquidated',
        remarks: `Auto-generated ${type.toLowerCase()}`,
        autoGenerated: true,
        type: type
    };
    funds[currentFund].disbursements.push(entry);
}
function deleteRow(idx) {
    if (confirm('Delete this disbursement?')) {
        const item = funds[currentFund].disbursements[idx];
        if (item.amountIssued > 0 && item.status === 'Unliquidated') {
            funds[currentFund].currentBudget += item.amountIssued;
        } else if (item.inflow > 0) {
            funds[currentFund].currentBudget -= item.inflow;
        } else if (item.outflow > 0 && !item.amountIssued) {
            funds[currentFund].currentBudget += item.outflow;
        } else if (item.type === 'REIMBURSE') {
            funds[currentFund].currentBudget += item.outflow;
        }
        funds[currentFund].disbursements.splice(idx, 1);
        displayFund();
    }
}
function addRow() {
    if (!currentFund) return alert('Select a fund first');
    addInputRow();
}
function updateDisplays() {
    const fund = funds[currentFund];
    const data = fund.disbursements;
    const totalIssued = data.filter(d => !d.autoGenerated && d.amountIssued > 0).reduce((sum, d) => sum + d.amountIssued, 0);
    const totalLiquidated = data.filter(d => d.status === 'Liquidated' && !d.autoGenerated && d.amountIssued > 0).reduce((sum, d) => sum + d.amountIssued, 0);
    const totalUnliquidated = totalIssued - totalLiquidated;
    const totalInflows = data.reduce((sum, d) => sum + (d.inflow || 0), 0);
    const totalOutflows = data.reduce((sum, d) => sum + (d.outflow || 0), 0);
    const availableBalance = fund.currentBudget;
    const flowBalance = calculateRunningBalance();
    const liquidationRate = totalIssued > 0 ? (totalLiquidated / totalIssued * 100).toFixed(1) : 0;
    const updates = {
        budgetDisplay: fund.currentBudget,
        issuedDisplay: totalIssued,
        availableDisplay: availableBalance,
        flowBalanceDisplay: flowBalance,
        beginningFund: fund.initialBudget,
        totalInflows: totalInflows,
        totalOutflows: totalOutflows,
        currentBudget: fund.currentBudget,
        liquidatedAmount: totalLiquidated,
        unliquidatedAmount: totalUnliquidated,
        liquidationRate: `${liquidationRate}%`
    };
    Object.keys(updates).forEach(key => {
        const value = typeof updates[key] === 'number' ? 
            `₱${updates[key].toLocaleString('en-US', {minimumFractionDigits: 2})}` : 
            updates[key];
        $(`#${key}`).text(value);
    });
    const cashTrans = data.filter(d => d.transactionType === 'CASH');
    const gcashTrans = data.filter(d => d.transactionType === 'GCASH');
    const cashAmount = fund.initialBudget + cashTrans.reduce((sum, d) => sum + (d.inflow || 0) - (d.outflow || 0), 0);
    const gcashAmount = gcashTrans.reduce((sum, d) => sum + (d.inflow || 0) - (d.outflow || 0), 0);
    $('#cashOnHand').text(`₱${cashAmount.toLocaleString('en-US', {minimumFractionDigits: 2})}`);
    $('#gcashAmount').text(`₱${gcashAmount.toLocaleString('en-US', {minimumFractionDigits: 2})}`);
    $('#totalAvailable').text(`₱${(cashAmount + gcashAmount).toLocaleString('en-US', {minimumFractionDigits: 2})}`);
    $('#finalBalance').text(`₱${fund.currentBudget.toLocaleString('en-US', {minimumFractionDigits: 2})}`);
}
$(document).ready(() => {
    $('#fundSelector').val('IT');
    manageFund();
});
